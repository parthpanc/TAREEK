from datetime import datetime
from db_operations import create_table, insert_case

def calculate_waiting_time(last_hearing_date):
    last_hearing_datetime = datetime.strptime(last_hearing_date, "%d-%m-%Y")
    current_datetime = datetime.now()
    waiting_time = (current_datetime - last_hearing_datetime).days
    return waiting_time

def prioritize_cases(case_data):
    sorted_cases = sorted(case_data, key=lambda x: (get_priority_level(x['case_type'], x['waiting_time']), x['waiting_time']), reverse=True)
    
    print("Cases sorted by priority and waiting time:")
    for case in sorted_cases:
        print(f"Case Number: {case['case_number']}, Case Type: {case['case_type']}, Last Hearing Date: {case['last_hearing_date']}, Waiting Time: {case['waiting_time']} days, Priority: {get_priority_level(case['case_type'], case['waiting_time'])}")

def get_priority_level(case_type, waiting_time):
    priority_levels = {
        'Murder': 3,
        'Robbery': 2,
        'Financial Fraud': 1
    }
    
    if waiting_time > 60:
        return 3
    
    return priority_levels.get(case_type, 0)

if __name__ == "__main__":
    num_cases = int(input("Enter the number of cases: "))

    case_data = []
    for _ in range(num_cases):
        case_type = input("Enter the type of case (Murder, Robbery, or Financial Fraud): ")
        last_hearing_date = input("Enter the last hearing date (YYYY-MM-DD): ")

        waiting_time = calculate_waiting_time(last_hearing_date)

        case_number_input = input("Enter a case number (press Enter to use timestamp-based case number): ")
        if case_number_input:
            case_number = int(case_number_input)
        else:
            case_number = int(datetime.timestamp(datetime.now()))

        create_table()
        insert_case(case_number, case_type, last_hearing_date, waiting_time)

        case_data.append({'case_number': case_number, 'case_type': case_type, 'last_hearing_date': last_hearing_date, 'waiting_time': waiting_time})

    prioritize_cases(case_data)
